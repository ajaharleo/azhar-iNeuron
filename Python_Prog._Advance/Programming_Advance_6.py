import logging
logging.basicConfig(filename='Prog6.log',level=logging.DEBUG, format='%(asctime)s %(levelname)s %(message)s')

'''
1. You are given two strings s and t. String t is generated by randomly shuffling string s and 
then adding one more letter at a random position. Return the letter that was added to t.
Examples
find_the_difference("abcd", "abcde") ➞ "e"
find_the_difference("", "y") ➞ "y"
find_the_difference("ae", "aea") ➞ "a"
'''


def find_the_difference(org_str, shuffled):
    ' return the letter which is extra in second string '
    try:
        logging.info('entering find_the_difference() function')
        if type(org_str) == str and type(shuffled) == str:
            for i in shuffled:
                if i not in org_str:
                    return i
                else:
                    if shuffled.count(i) != org_str.count(i):
                        return i
        else:
            raise TypeError('Input should be string')
    except Exception as e:
        logging.error(e)


# print(find_the_difference("", "y"))
'''
2. Given a function that accepts unlimited arguments, check and count how many data types are in those arguments.
 Finally return the total in a list.
List order is:
[int, str, bool, list, tuple, dictionary]
Examples
count_datatypes(1, 45, "Hi", False) ➞ [2, 1, 1, 0, 0, 0]
count_datatypes([10, 20], ("t", "Ok"), 2, 3, 1) ➞ [3, 0, 0, 1, 1, 0]
count_datatypes("Hello", "Bye", True, True, False, {"1": "One", "2": "Two"}, [1, 3], {"Brayan": 18}, 25, 23) ➞ [2, 2, 3, 1, 0, 2]
count_datatypes(4, 21, ("ES", "EN"), ("a", "b"), False, [1, 2, 3], [4, 5, 6]) ➞ [2, 0, 1, 2, 2, 0]
'''


def count_datatypes(*args):
    ' from given n number of data types tell count of each data types '
    try:
        logging.info('entering find_the_difference() function')
        int0, str1, bool2, list3, tuple4, dict5 = 0, 0, 0, 0, 0, 0
        for i in args:
            if type(i) == int:
                int0 += 1
            elif type(i) == str:
                str1 += 1
            elif type(i) == bool:
                bool2 += 1
            elif type(i) == list:
                list3 += 1
            elif type(i) == tuple:
                tuple4 += 1
            elif type(i) == dict:
                dict5 += 1
        return [int0, str1, bool2, list3, tuple4, dict5]
    except Exception as e:
        logging.error(e)


# print(count_datatypes("Hello", "Bye", True, True, False, {"1": "One", "2": "Two"}, [1, 3], {"Brayan": 18}, 25, 23))
'''
3. A Fibonacci string is a precedence of the Fibonacci series. 
It works with any two characters of the English alphabet 
(as opposed to the numbers 0 and 1 in the Fibonacci series) as the initial items and concatenates them together as
 it progresses in a similar fashion as the Fibonacci series.
Examples
fib_str(3, ["j", "h"]) ➞ "j, h, hj"
fib_str(5, ["e", "a"]) ➞ "e, a, ae, aea, aeaae"
fib_str(6, ["n", "k"]) ➞ "n, k, kn, knk, knkkn, knkknknk"
'''


def fib_str(number,items):
    ' return nth word in the fibonacci sequence of given letters '
    try:
        logging.info('entering fib_str() function')
        if type(number) == int and type(items) == list:
            if number == 1:
                return items[0]
            elif number ==2:
                return  items[1]
            elif number >2:
                for i in range(2,number):
                    items.append(items[i-1] + items[-2])
                return ', '.join(items)
        else:
            raise TypeError('Input should be string')
    except Exception as e:
        logging.error(e)


# print(fib_str(6, ["n", "k"]))
'''
4. Given an integer between 0 and 26, make a variable (self.answer). That variable would be assigned to a string in this format:
"nines:your answer, threes:your answer, ones:your answer"
You need to find out how many ones, threes, and nines 
it would at least take for the number of each to add up to the given integer when multiplied by one, three or nine (depends).
Examples
ones_threes_nines(10) ➞ "nines:1, threes:0, ones:1"
ones_threes_nines(15) ➞ "nines:1, threes:2, ones:0"
ones_threes_nines(22) ➞ "nines:2, threes:1, ones:1"
'''


def ones_threes_nines(number):
    ' tells count of ones, threes and nines required in the number '
    try:
        logging.info('entering ones_threes_nines() function')
        if type(number) == int:
            ones, threes, nines = 0,0,0

            if number<=3:
                ones = number
            elif number<=9:
                ones,threes = number%3 , number//3
            elif number > 9:
                nines = number // 9
                if number%9 <= 3:
                    ones = (number % 9)
                else:
                    threes = (number%9)//3
                    ones = (number%9)%3
            answer = f'nines:{nines}, threes:{threes}, ones:{ones}'
            return answer
        else:
            raise TypeError('Input should be string')
    except Exception as e:
        logging.error(e)


# print(ones_threes_nines(22))
'''
5. The Fibonacci sequence is a classic use case for recursive functions since the value of the sequence 
at a given index is dependent on the sum of the last two values. However, the recursion tree created by solving 
the Fibonacci sequence recursively can grow quite fast. Therefore it can be important to 
think about the implications of running a function recursively. Depending on the size of n needed and 
the capabilities of the system in question you might want to take a different approach.
Write a non-recursive function that takes an integer n and returns the Fibonacci sequence's value at index n.
Examples
fib(6) ➞ 8
# 0 + 1 = 1, 1 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8
fib(1) ➞ 1
fib(2) ➞ 1
'''


def fib(number):
    ' fibonacci number without recursion '
    try:
        logging.info('entering fib() function')
        if type(number) == int:
            fibonacci = [0,1]
            if number<=0:
                return 0
            elif number ==1:
                return 1
            else:
                for i in range(2,number+1):
                    fibonacci.append(fibonacci[i-1] + fibonacci[i-2])
                return fibonacci[number]
        else:
            raise TypeError('Input should be integer')
    except Exception as e:
        logging.error(e)


# print(fib(6))
